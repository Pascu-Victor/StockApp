namespace BankApi.Services
{
    using BankApi.Repositories;
    using Common.Models;
    using Common.Services;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// Initializes a new instance of the <see cref="StockPageService"/> class.
    /// </summary>
    public class StockPageService(IStockPageRepository stockRepo, IUserRepository userRepo, ITransactionRepository transactionRepo) : IStockPageService
    {
        private readonly IStockPageRepository stockRepo = stockRepo ?? throw new ArgumentNullException(nameof(stockRepo));
        private readonly IUserRepository userRepo = userRepo ?? throw new ArgumentNullException(nameof(userRepo));
        private readonly ITransactionRepository transactionRepo = transactionRepo ?? throw new ArgumentNullException(nameof(transactionRepo));
        readonly Random randomNumberGenerator = new();

        /// <inheritdoc/>
        public async Task<string> GetStockNameAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return stock.Name;
        }

        /// <inheritdoc/>
        public async Task<string> GetStockSymbolAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return stock.Symbol;
        }

        /// <inheritdoc/>
        public async Task<List<int>> GetStockHistoryAsync(string stockName)
        {
            return await stockRepo.GetStockHistoryAsync(stockName);
        }

        /// <inheritdoc/>
        public async Task<int> GetOwnedStocksAsync(string stockName, string userCNP)
        {
            return await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
        }

        /// <inheritdoc/>
        public async Task<UserStock> GetUserStockAsync(string stockName, string userCNP)
        {
            if (string.IsNullOrEmpty(stockName))
            {
                throw new Exception("No stock selected.");
            }
            var userStock = await stockRepo.GetUserStockAsync(userCNP, stockName);
            return userStock ?? throw new Exception("User stock not found.");
        }

        /// <inheritdoc/>
        public async Task<bool> BuyStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int stockPrice = selectedStock.Price;
            int totalPrice = stockPrice * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
            var user = await userRepo.GetByCnpAsync(userCNP);
            if (user?.GemBalance >= totalPrice)
            {
                user.GemBalance -= totalPrice;
                await userRepo.UpdateAsync(user);

                int newPrice = stockPrice + (randomNumberGenerator.Next(0, 20) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount + quantity);

                await transactionRepo.AddTransactionAsync(
                    new TransactionLogTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "BUY",
                        Amount = quantity,
                        PricePerStock = stockPrice,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });

                return true;
            }

            return false;
        }

        /// <inheritdoc/>
        public async Task<bool> SellStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int totalPrice = selectedStock.Price * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
            if (ownedStockCount >= quantity)
            {
                int newPrice = selectedStock.Price + (randomNumberGenerator.Next(0, 10) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount - quantity);

                var user = await userRepo.GetByCnpAsync(userCNP);
                user.GemBalance += totalPrice;
                await userRepo.UpdateAsync(user);

                await transactionRepo.AddTransactionAsync(
                    new TransactionLogTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "SELL",
                        Amount = quantity,
                        PricePerStock = selectedStock.Price,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });

                return true;
            }

            return false;
        }

        /// <inheritdoc/>
        public async Task<bool> GetFavoriteAsync(string stockName, string userCNP)
        {
            return await stockRepo.GetFavoriteAsync(userCNP, stockName);
        }

        /// <inheritdoc/>
        public async Task ToggleFavoriteAsync(string stockName, bool state, string userCNP)
        {
            await stockRepo.ToggleFavoriteAsync(userCNP, stockName, state);
        }

        /// <inheritdoc/>
        public async Task<User> GetStockAuthorAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return await userRepo.GetByCnpAsync(stock.AuthorCNP) ?? throw new Exception("User not found.");
        }
    }
}
